Tools Installed:
Wireshark
Hping3
Hydra
VSCode
iw
tcpdump
hostapd 
dnsmasq 
iproute2
nmap

for my literature review these are the papers i've read: 
see preliminary report references



Wordlists Downloaded For Hydra:
rockyou.txt

Setup and tested C enviroment with basic hello world script.

## üöÄ GitHub Workflow (Basic Git Commands)

Use the following Git commands to manage version control and push changes to your GitHub repository.

| Command | Description |
|--------|-------------|
| `git status` | Shows the current state of your working directory (changes, untracked files, etc.). |
| `git add .` | Stages all changed files for the next commit. |
| `git add <filename>` | Stages a specific file only. |
| `git commit -m "your message"` | Commits the staged changes with a message describing the update. |
| `git push` | Uploads your local commits to the GitHub repository. |
| `git pull` | Fetches and merges the latest changes from GitHub into your local branch. |
| `git log` | Displays the history of commits in the current branch. |
| `git clone <repo-url>` | Creates a local copy of a GitHub repository. |
| `git branch -M main` | Renames the current branch to `main` (used in setup). |
| `git remote add origin <repo-url>` | Connects your local repo to a GitHub remote repository. |
| `git remote -v` | Shows the current remote repository URLs. |

### ‚úÖ Typical Workflow

```bash
# 1. Check current changes
git status

# 2. Stage changes
git add .

# 3. Commit with a message
git commit -m "Add feature or fix bug"

# 4. Push to GitHub
git push

# 5. Pull latest changes before working (if collaborating or using multiple devices)
git pull


## IoT Device Profiles Considered for Synthetic Traffic Generation

To create realistic network datasets for IoT intrusion detection research, I evaluated several of the most **widely deployed consumer IoT device types** that can be **reasonably emulated** on a Raspberry Pi 3 (RB3).
Each profile focuses on the network behavior patterns that are characteristic of the device, not exact vendor protocols.

---

### 1. IP Camera / Smart Doorbell (e.g., Ring, TP-Link Kasa Cam, Wyze)

**Why considered:**
Extremely common; produces both sustained high-bitrate streaming traffic and event-based bursts (motion or doorbell press). Excellent for modeling continuous flows, TLS sessions, and upload bursts.

**Typical behavior:**

* Continuous TCP/UDP stream when live view or recording is active.
* Keepalive/control messages every 20‚Äì60 seconds.
* Event-triggered bursts of higher bitrate or short metadata uploads.
* Average upload bitrate around 1‚Äì4 Mbps for 1080p video.

**High-level pseudocode:**

```
CameraProfile:
  set base_stream_bitrate = 2.5 Mbps
  set keepalive_interval = 30 s
  set motion_event_schedule(randomized)

  connect_to_server()
  loop:
    if streaming_mode:
        send_packets(rate=base_stream_bitrate)
    every keepalive_interval:
        send_small_control_message()
    if motion_event_occurs:
        temporarily_increase_bitrate(‚âà5 Mbps, duration=10‚Äì30 s)
        send_event_metadata()
```



---

### 2. Smart Bulb / Lighting Hub (Philips Hue style)

**Why considered:**
Very popular in smart-home setups. Generates frequent small control-plane HTTP/REST traffic and multicast discovery packets. Useful for modeling low-bandwidth but high-frequency transactions.

**Typical behavior:**

* SSDP/mDNS discovery every 1‚Äì5 minutes.
* REST polling every 2‚Äì10 seconds to read device state.
* PUT/POST messages when user changes a scene or color.
* Small JSON payloads (hundreds of bytes).

**High-level pseudocode:**

```
HueLikeProfile:
  set poll_interval = 5 s
  set discovery_interval = 120 s
  set scene_change_schedule(randomized)

  loop:
    every discovery_interval:
        send_ssdp_discovery()
    every poll_interval:
        http_get("/lights/<id>")
    if scene_change_event:
        http_put("/lights/<id>/state", json_payload)
```


---

### 3. Smart Plug / Energy-Monitoring Plug (TP-Link HS110, Sonoff S31, etc.)

**Why considered:**
Common and well-documented. Sends periodic telemetry (power, current) and occasional summaries. Ideal for modeling periodic small telemetry messages.

**Typical behavior:**

* Telemetry publish every 5‚Äì60 seconds (power, current, energy).
* Summary or statistics upload hourly/daily.
* State change (on/off) triggers immediate update.
* Payloads are small JSON objects (100‚Äì500 bytes).

**High-level pseudocode:**

```
PlugProfile:
  set telemetry_interval = 10 s
  set summary_interval = 3600 s
  set state_change_schedule(randomized)

  connect_mqtt_or_https()
  loop:
    every telemetry_interval:
        publish_json({"power": simulated_value, "timestamp": now})
    every summary_interval:
        publish_json({"daily_energy": sum, ...})
    if state_change_event:
        publish_json({"state": "on/off"})
```


---

### 4. Voice Assistant / Smart Speaker (Amazon Echo, Google Home)

**Why considered:**
Highly prevalent in households. Generates a blend of persistent connections, small keepalives, and occasional audio-upload bursts when activated. Great for simulating TLS session dynamics and sporadic large data transfers.

**Typical behavior:**

* Maintains persistent TLS connection to cloud.
* Sends small keepalive/heartbeat messages periodically (30‚Äì300 s).
* On activation (‚ÄúHey Alexa‚Äù), uploads short audio chunk (1‚Äì2 MB).
* Receives small control responses or updates.

**High-level pseudocode:**

```
VoiceAssistantProfile:
  set keepalive_interval = 120 s
  set voice_event_schedule(randomized)

  open_tls_connection()
  loop:
    every keepalive_interval:
        send_small_ping()
    if voice_event_occurs:
        upload_audio_chunk(size‚âà1‚Äì2 MB)
        wait_for_server_response()
```



---

### Implementation Notes

* Parameters such as timing, payload size, and event schedules should be randomized within realistic ranges to avoid deterministic traffic.
* Output ground-truth logs (device ID, mode, timestamps) for labeling your IDS dataset.
* Capture generated traffic with `tcpdump` or similar to produce `.pcap` files for analysis.

---

**Summary:**
These four device classes (IP Cameras, Smart Bulbs, Smart Plugs, and Voice Assistants) represent the most common and diverse IoT traffic patterns in consumer networks ‚Äî covering high-bandwidth streams, low-bandwidth control chatter, periodic telemetry, and sporadic bursts ‚Äî making them excellent candidates for generating realistic datasets for IoT IDS research.



Security Smart Cam Sim Program Usage:
 *   ./smartcam_sim [options]
 *
 * Options (examples):
 *   -a <addr>    Server IPv4 address (default: 192.0.2.1)
 *   -p <port>    Server UDP port (default: 9000)
 *   -b <mbps>    Base stream bitrate in Mbps (default: 2.5)
 *   -m <mbps>    Motion/burst bitrate in Mbps (default: 5.0)
 *   -k <sec>     Keepalive interval in seconds (default: 30)
 *   -s <bytes>   UDP payload size in bytes (default: 1200)
 *   -i <sec>     Min interval between motion events (default: 20)
 *   -x <sec>     Max interval between motion events (default: 180)
 *   -h           Show this help and exit
 *
 * Notes:
 * - Intended to simulate network patterns for lab/testing. 
 */

 Wireshark Filters:
 udp
 udp.port == xxx
 frame contains "x"









